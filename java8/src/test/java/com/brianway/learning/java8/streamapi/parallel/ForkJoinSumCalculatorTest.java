package com.brianway.learning.java8.streamapi.parallel;

import com.brianway.learning.java8.streamapi.parallel.ForkJoinSumCalculator;
import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class ForkJoinSumCalculatorTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: com/brianway/learning/java8/streamapi/parallel/ForkJoinSumCalculator.java */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 31 branch to line 32
   */

  @Test
  public void computeOutputZero()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    ForkJoinSumCalculator objectUnderTest = ((ForkJoinSumCalculator)Reflector.getInstance(
        "com.brianway.learning.java8.streamapi.parallel.ForkJoinSumCalculator"));
    Reflector.setField(objectUnderTest, "end", 0);
    Reflector.setField(objectUnderTest, "numbers", null);
    Reflector.setField(objectUnderTest, "start", 0);

    // Act
    Class<?> classUnderTest =
        Reflector.forName("com.brianway.learning.java8.streamapi.parallel.ForkJoinSumCalculator");
    Method methodUnderTest = classUnderTest.getDeclaredMethod("compute");
    methodUnderTest.setAccessible(true);
    Long retval = (Long)methodUnderTest.invoke(objectUnderTest);

    // Assert result
    Assert.assertEquals(new Long(0L), retval);
  }
}
