package com.brianway.learning.java8.streamapi.collect;

import com.brianway.learning.java8.streamapi.collect.PartitionPrimeNumbers;
import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;

public class PartitionPrimeNumbersTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: com/brianway/learning/java8/streamapi/collect/PartitionPrimeNumbers.java */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 73 branch to line 73
   *
   *  - conditional line 73 branch to line 73
   *  - conditional line 73 branch to line 79
   */

  @Test
  public void takeWhileInput0NotNullOutput0() throws InvocationTargetException {

    // Arrange
    ArrayList list = new ArrayList();
    Predicate p = ((Predicate)Reflector.getInstance("java.util.function.Predicate"));

    // Act
    List retval = PartitionPrimeNumbers.takeWhile(list, p);

    // Assert result
    ArrayList arrayList = new ArrayList();
    Assert.assertEquals(arrayList, retval);
  }
}
