package com.brianway.learning.java.multithread.singleton.example3;

import com.brianway.learning.java.multithread.singleton.example3.MyObject2;
import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class MyObject2Test {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: com/brianway/learning/java/multithread/singleton/example3/MyObject2.java */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire method.
   */

  @Test
  public void readResolveOutputNotNull()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    MyObject2 objectUnderTest = ((MyObject2)Reflector.getInstance(
        "com.brianway.learning.java.multithread.singleton.example3.MyObject2"));

    // Act
    Class<?> classUnderTest =
        Reflector.forName("com.brianway.learning.java.multithread.singleton.example3.MyObject2");
    Method methodUnderTest = classUnderTest.getDeclaredMethod("readResolve");
    methodUnderTest.setAccessible(true);
    Object retval = (Object)methodUnderTest.invoke(objectUnderTest);

    // Assert result
    Assert.assertNotNull(retval);
  }
}
